@startuml

abstract class Module

abstract class NestingModule {
  placeholders : List[Placeholder]
  ---
  create_placeholder(...)
  set_placeholders(...)
}

class Placeholder {
  input_ids
  owner
}

Module <|-- NestingModule
Module <|-- Placeholder
NestingModule +-- Placeholder
NestingModule --> Placeholder

class LeafLayer {
  nodes : List[LeafNode]
}

class LeafNode

Module <|-- LeafLayer
LeafLayer --> LeafNode

class Scope {
  variables : Set[int]
  network_type : NetworkType
}

NetworkType <-- Scope

LeafNode --> Scope

class ProductLayer {
  nodes : List[ProductNode]
}

class SumLayer {
  nodes : List[SumNode]
}

abstract class Module

class DispatchCache {
  likelihood : Dict[Module, np.ndarray]
  scope : Dict[Module, np.ndarray]
  sample : Dict[Module, np.ndarray]
}

class DispatchContext {
  cache : DispatchCache
  args : Dict[Module, np.ndarray]
}

Module --- DispatchCache : key
DispatchCache <-- DispatchContext
Module --- DispatchContext : key

class SumNode

NestingModule <|-- SumLayer
SumLayer --> SumNode

class ProductNode

NestingModule <|-- ProductLayer
ProductLayer --> ProductNode

abstract class  NetworkType
NetworkType <|-- SPN
NetworkType <|-- BN
@enduml