name: Development Build & Test

on:
  release:
    types: [ published ]
  pull_request:
  push:

jobs:

  "Lint":
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: |
            **/pyproject.toml
      - name: Install library and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Lint
        run: ruff check src

  "Check_Format":
    name: "Check Format"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: |
            **/pyproject.toml
      - name: Install library and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Checking formatting with black
        run: black --check --diff src/

  # "Test":
  #   name: "Test: Py ${{ matrix.python-version }} + Torch ${{ matrix.pytorch-version }}"
  #   strategy:
  #     fail-fast: false  # Don't fail fast to explore which configurations fail
  #     matrix:
  #       # We do not want to waste too many resources on testing all combinations. Thus we test:
  #       # - on the oldest and the two most recent version of Python that we support (see README.md)
  #       #   (to catch if only the newest version breaks something)
  #       # - with the oldest version of the backend we support plus the two most recent major ones
  #       # - A single test on Windows and macOS to catch if something breaks there
  #       python-version: ['3.9', '3.10', '3.11']  # 3.12 is not yet supported by torch
  #       pytorch-version: ['1.11.0', '2.0.1', '2.1.1']
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python ${{ matrix.python-version }}, PyTorch ${{ matrix.pytorch-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: 'pip' # caching pip dependencies
  #         cache-dependency-path: |
  #           **/pyproject.toml
  #     - name: Install library and dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install torch==${{ matrix.pytorch-version }}
  #         pip install .[dev]
  #     - name: Test with pytest
  #       run: |
  #         pytest

  # We do not want to waste too many resources on testing all combinations. Thus we test:
  # - on the oldest and the two most recent version of Python that we support (see README.md)
  # - with the oldest version of the backend we support plus the two most recent major ones
  #   (to catch if only the newest version breaks something)
  # - A single test on Windows and macOS to catch if something breaks there
  # - We only test on the most recent version of macOS and Windows to save resources
  # - We only test on one version of python for TensorFlow and Jax to save resources

  "Test_OS":
    name: "Test: Py ${{ matrix.version-python }} @ OS ${{ matrix.version-pytorch }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version-python: ['3.12']
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/run_tests"
        with:
          version-python: ${{ matrix.version-python }}

  "Test_Torch":
    name: "Test: Py ${{ matrix.version-python }} + Torch ${{ matrix.version-pytorch }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false 
      matrix:
        version-python: ['3.9', '3.11']  # 3.12 is not yet supported by torch
        version-pytorch: ['1.11.0', '2.0.1', '2.1.1']
        exclude: # Non-supported combinations
          - version-python: '3.11'
            version-pytorch: '1.11.0'
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/run_tests"
        with:
          version-python: ${{ matrix.version-python }}
          version-pytorch: ${{ matrix.version-pytorch }}

  "Test_Tensorflow":
    name: "Test: Py ${{ matrix.version-python }} + TF ${{ matrix.version-tensorflow }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false 
      matrix:
        include:
          - version-python: '3.10'
            version-tensorflow: '2.11.0'
          - version-python: '3.11'
            version-tensorflow: '2.15.0.post1'
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/run_tests"
        with:
          version-python: ${{ matrix.version-python }}
          version-tensorflow: ${{ matrix.version-tensorflow }}

  "Test_Jax":
    name: "Test: Py ${{ matrix.version-python }} + Jax ${{ matrix.version-jax }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false 
      matrix:
        version-python: ['3.12']
        version-jax: ['0.3.25', '0.4.23']
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/run_tests"
        with:
          version-python: ${{ matrix.version-python }}
          version-jax: ${{ matrix.version-jax }}
