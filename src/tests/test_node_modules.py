import unittest
import numpy as np
from spflow.base.structure.nodes.node_module import (
    Node,
    SumNode,
    ProductNode,
    LeafNode,
)
from spflow.base.structure.module import _get_node_counts
from spflow.base.structure.network_type import SPN, set_network_type
from spflow.base.structure.nodes.validity_checks import _isvalid_spn
from spflow.base.learning.context import RandomVariableContext  # type: ignore
from spflow.base.structure.nodes.leaves.parametric import Gaussian


class TestNode(unittest.TestCase):
    def test_spn_fail_scope1(self):
        context = RandomVariableContext(parametric_types=[Gaussian, Gaussian])

        with set_network_type(SPN()):
            spn_module: Node = ProductNode(
                children=[
                    LeafNode(scope=[1], context=context),
                    LeafNode(scope=[1], context=context),
                ],
                scope=[0, 1],
            )

        with self.assertRaises(AssertionError):
            _isvalid_spn(spn_module)

    def test_spn_fail_scope2(self):
        with self.assertRaises(IndexError):
            context = RandomVariableContext(parametric_types=[Gaussian])

            with set_network_type(SPN()):
                spn_module: Node = ProductNode(
                    children=[
                        LeafNode(scope=[0], context=context),
                        LeafNode(scope=[1], context=context),
                    ],
                    scope=[0],
                )

    def test_spn_fail_scope3(self):
        context = RandomVariableContext(parametric_types=[Gaussian, Gaussian])

        with set_network_type(SPN()):
            spn_module: Node = ProductNode(
                children=[
                    LeafNode(scope=[0], context=context),
                    LeafNode(scope=[1], context=context),
                ],
                scope=[0],
                network_type=SPN(),
            )

        with self.assertRaises(AssertionError):
            _isvalid_spn(spn_module)

    def test_spn_fail_weights1(self):
        with self.assertRaises(AssertionError):
            context = RandomVariableContext(parametric_types=[Gaussian])

            with set_network_type(SPN()):
                spn_module: Node = SumNode(
                    children=[
                        LeafNode(scope=[0], context=context),
                        LeafNode(scope=[0], context=context),
                    ],
                    scope=[0],
                    weights=np.array([0.49, 0.49]),
                )

    def test_spn_fail_weights2(self):
        with self.assertRaises(AssertionError):
            context = RandomVariableContext(parametric_types=[Gaussian])

            with set_network_type(SPN()):
                spn_module: Node = SumNode(
                    children=[
                        LeafNode(scope=[0], context=context),
                        LeafNode(scope=[0], context=context),
                    ],
                    scope=[0],
                    weights=np.array([1.0]),
                )

    def test_spn_missing_children(self):
        with set_network_type(SPN()):
            spn_module: Node = ProductNode(children=[], scope=[0, 1])

        with self.assertRaises(AssertionError):
            _isvalid_spn(spn_module)

    def test_spn_fail_leaf_with_children(self):
        context = RandomVariableContext(parametric_types=[Gaussian])
        with set_network_type(SPN()):
            spn_module: Node = SumNode(
                children=[
                    LeafNode(scope=[0], context=context),
                    LeafNode(scope=[0], context=context),
                ],
                scope=[0],
                weights=np.array([0.5, 0.5]),
            )

            # make sure SPN is valid to begin with
            _isvalid_spn(spn_module)

            spn_module.output_nodes[0].children[0].children.append(
                LeafNode(scope=[0], context=context)
            )

        with self.assertRaises(AssertionError):
            _isvalid_spn(spn_module)

    def test_spn_fail_none_children(self):
        with self.assertRaises(AssertionError):
            context = RandomVariableContext(parametric_types=[Gaussian, Gaussian])

            with set_network_type(SPN()):
                spn_module: Node = ProductNode(
                    children=[LeafNode(scope=[0], context=context), None], scope=[1, 0]
                )

    def test_spn_tree_small(self):
        context = RandomVariableContext(parametric_types=[Gaussian, Gaussian])

        with set_network_type(SPN()):
            spn_module: Node = ProductNode(
                children=[
                    SumNode(
                        children=[
                            LeafNode(scope=[0], context=context),
                            LeafNode(scope=[0], context=context),
                        ],
                        scope=[0],
                        weights=np.array([0.3, 0.7]),
                    ),
                    LeafNode(scope=[1], network_type=SPN(), context=context),
                ],
                scope=[0, 1],
            )
        _isvalid_spn(spn_module)
        sum_nodes, prod_nodes, leaf_nodes = _get_node_counts(spn_module)
        self.assertEqual(sum_nodes, 1)
        self.assertEqual(prod_nodes, 1)
        self.assertEqual(leaf_nodes, 3)

    def test_spn_tree_big(self):
        context = RandomVariableContext(
            parametric_types=[Gaussian, Gaussian, Gaussian, Gaussian, Gaussian]
        )

        with set_network_type(SPN()):
            spn_module: Node = ProductNode(
                children=[
                    SumNode(
                        children=[
                            ProductNode(
                                children=[
                                    SumNode(
                                        children=[
                                            ProductNode(
                                                children=[
                                                    LeafNode(scope=[0], context=context),
                                                    LeafNode(scope=[1], context=context),
                                                ],
                                                scope=[0, 1],
                                                network_type=SPN(),
                                            ),
                                            LeafNode(scope=[0, 1], context=context),
                                        ],
                                        scope=[0, 1],
                                        weights=np.array([0.9, 0.1]),
                                    ),
                                    LeafNode(scope=[2], context=context),
                                ],
                                scope=[0, 1, 2],
                            ),
                            ProductNode(
                                children=[
                                    LeafNode(scope=[0], context=context),
                                    SumNode(
                                        children=[
                                            LeafNode(scope=[1, 2], context=context),
                                            LeafNode(scope=[1, 2], context=context),
                                        ],
                                        scope=[1, 2],
                                        weights=np.array([0.5, 0.5]),
                                    ),
                                ],
                                scope=[0, 1, 2],
                            ),
                            LeafNode(scope=[0, 1, 2], context=context),
                        ],
                        scope=[0, 1, 2],
                        weights=np.array([0.4, 0.1, 0.5]),
                    ),
                    SumNode(
                        children=[
                            ProductNode(
                                children=[
                                    LeafNode(scope=[3], context=context),
                                    LeafNode(scope=[4], context=context),
                                ],
                                scope=[3, 4],
                            ),
                            LeafNode(scope=[3, 4], context=context),
                        ],
                        scope=[3, 4],
                        weights=np.array([0.5, 0.5]),
                    ),
                ],
                scope=[0, 1, 2, 3, 4],
            )

        _isvalid_spn(spn_module)
        sum_nodes, prod_nodes, leaf_nodes = _get_node_counts(spn_module)
        self.assertEqual(sum_nodes, 4)
        self.assertEqual(prod_nodes, 5)
        self.assertEqual(leaf_nodes, 11)

    def test_spn_graph_small(self):
        context = RandomVariableContext(parametric_types=[Gaussian, Gaussian])

        with set_network_type(SPN()):
            leaf1 = LeafNode(scope=[0], context=context)
            leaf2 = LeafNode(scope=[1], context=context)
            prod1 = ProductNode(children=[leaf1, leaf2], scope=[0, 1])
            prod2 = ProductNode(children=[leaf1, leaf2], scope=[0, 1])
            sum = SumNode(children=[prod1, prod2], scope=[0, 1], weights=np.array([0.3, 0.7]))

        _isvalid_spn(sum)
        sum_nodes, prod_nodes, leaf_nodes = _get_node_counts(sum)
        self.assertEqual(sum_nodes, 1)
        self.assertEqual(prod_nodes, 2)
        self.assertEqual(leaf_nodes, 2)

    def test_spn_graph_medium(self):
        context = RandomVariableContext(parametric_types=[Gaussian, Gaussian])

        with set_network_type(SPN()):
            leaf_11 = LeafNode(scope=[0], context=context)
            leaf_12 = LeafNode(scope=[0], context=context)
            leaf_21 = LeafNode(scope=[1], context=context)
            leaf_22 = LeafNode(scope=[1], context=context)
            sum_11 = SumNode(children=[leaf_11, leaf_12], scope=[0], weights=np.array([0.3, 0.7]))
            sum_12 = SumNode(children=[leaf_11, leaf_12], scope=[0], weights=np.array([0.9, 0.1]))
            sum_21 = SumNode(children=[leaf_21, leaf_22], scope=[1], weights=np.array([0.4, 0.6]))
            sum_22 = SumNode(children=[leaf_21, leaf_22], scope=[1], weights=np.array([0.8, 0.2]))
            prod_11 = ProductNode(children=[sum_11, sum_21], scope=[0, 1])
            prod_12 = ProductNode(children=[sum_11, sum_22], scope=[0, 1])
            prod_13 = ProductNode(children=[sum_12, sum_21], scope=[0, 1])
            prod_14 = ProductNode(children=[sum_12, sum_22], scope=[0, 1])
            sum = SumNode(
                children=[prod_11, prod_12, prod_13, prod_14],
                scope=[0, 1],
                weights=np.array([0.1, 0.2, 0.3, 0.4]),
            )

        _isvalid_spn(sum)

        sum_nodes, prod_nodes, leaf_nodes = _get_node_counts(sum)
        self.assertEqual(sum_nodes, 5)
        self.assertEqual(prod_nodes, 4)
        self.assertEqual(leaf_nodes, 4)


if __name__ == "__main__":
    unittest.main()
